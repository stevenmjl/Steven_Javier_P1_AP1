@page "/Aportes/Edit/{idAporte:int}"
@rendermode InteractiveServer
@inject AportesService aportesService
@inject NavigationManager Navigation

<PageTitle>Editar Aporte</PageTitle>

<EditForm Model="Aporte" OnValidSubmit="Editar">
    <DataAnnotationsValidator /> <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-warning rounded">
                    <h1>Editar Aporte</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* AporteID *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="AporteId">ID:</label>
                    <InputNumber id="AporteId" class="form-control text-left" readonly
                                 @bind-Value="Aporte.AportesId"></InputNumber>
                </div>

                @* Persona *@
                <div class="mb-3 col-4">
                    <label class="form-label" for="Persona">Persona:</label>
                    <InputText id="Persona" class="form-control"
                               @bind-Value="Aporte.Persona" placeholder="Ej: Pepe">
                    </InputText>
                    <ValidationMessage For="@(() => Aporte.Persona)"></ValidationMessage>
                </div>

                @* Observaciones *@
                <div class="mb-3">
                    <label class="form-label" for="Observacion">Observaci&oacute;n:</label>
                    <InputText id="Observacion" class="form-control"
                               @bind-Value="Aporte.Observacion" placeholder="Ej: Caridad de padre">
                    </InputText>
                    <ValidationMessage For="@(() => Aporte.Observacion)"></ValidationMessage>
                </div>

                @* Monto *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Monto">Monto:</label>
                    <InputNumber id="Monto" class="form-control"
                                 @bind-Value="Aporte.Monto"></InputNumber>
                    <ValidationMessage For="@(() => Aporte.Monto)"></ValidationMessage>
                </div>
            </div>

            @* Mensajes de error*@
            @if (!string.IsNullOrEmpty(MensajeError)) {
                <div class="alert alert-danger">@MensajeError</div>
            }

            @if (!string.IsNullOrEmpty(MensajeExito)) {
                <div class="alert alert-success">@MensajeExito</div>
            }

            @* Botones de Editar y de Volver *@
            <div class="card-footer d-flex justify-content-center">
                <button type="submit" class="btn btn-warning">
                    Editar
                </button>
                <button class="btn btn-secondary" type="button" @onclick="Volver">
                    Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Aportes Aporte { get; set; } = new Aportes();
    private string MensajeError = "";
    private string MensajeExito = "";

    [Parameter]
    public int idAporte { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Aporte = await aportesService.Buscar(idAporte);

        if (Aporte == null) {
            Navigation.NavigateTo("/Aportes/Index");
        }
    }

    public async Task Editar()
    {
        MensajeError = "";
        MensajeExito = "";

        if (!await Validar())
        {
            var aporteEditado = await aportesService.Guardar(Aporte);
            if (aporteEditado)
            {
                MensajeExito = $"Aporte {Aporte.Observacion} ha sido editado correctamente.";
            }
            else
            {
                MensajeError = "El aporte no se ha podido editar correctamente.";
            }
        }
        else
        {
            MensajeError = "Ya existe un aporte con la misma observación.";
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await aportesService.Existe(Aporte.AportesId, Aporte.Persona, Aporte.Observacion);
        return existe;
    }

    public void Volver() => Navigation.NavigateTo("/Aportes/Index");
}